[
    {
        "name": "Total Function",
        "content": "\nA (total) function f : D \u2192 C (with sets D, C )\nmaps every value of its domain D\nto exactly one value of its codomain C .\n"
    },
    {
        "name": "Partial Function",
        "content": "\nA partial function f : X \u2192p Y maps every value in X\nto at most one value in Y .\nIf f does not map x \u2208 X to any value in Y ,\nthen f is undefined for x.\n"
    },
    {
        "name": "",
        "content": "A set is an unordered collection of distinct objects.\nThe set that does not contain any objects is the empty set \u2205.\n\u25b6 A definition introduces an abbreviation.\n\u25b6 Whenever we say \u201cset\u201d, we could instead say \u201can unordered\ncollection of distinct objects\u201d and vice versa.\n\u25b6 Definitions can also introduce notation.\n"
    },
    {
        "name": "Alphabets, Words and Formal Languages",
        "content": "\nAn alphabet \u03a3 is a finite non-empty set of symbols.\nA word over \u03a3 is a finite sequence of elements from \u03a3.\nThe empty word (the empty sequence of elements) is denoted by \u03b5.\n\u03a3\u2217 denotes the set of all words over \u03a3.\n\u03a3+ (= \u03a3\u2217 \\ {\u03b5}) denotes the set of all non-empty words over \u03a3.\nWe write |w | for the length of a word w .\nA formal language (over alphabet \u03a3) is a subset of \u03a3\u2217.\n"
    },
    {
        "name": "Deterministic Finite Automata",
        "content": "\nA deterministic finite automaton (DFA) is a 5-tuple\nM = \u27e8Q, \u03a3, \u03b4, q0, F \u27e9 where\n\u25b6 Q is the finite set of states\n\u25b6 \u03a3 is the input alphabet\n\u25b6 \u03b4 : Q \u00d7 \u03a3 \u2192 Q is the transition function\n\u25b6 q0 \u2208 Q is the start state\n\u25b6 F \u2286 Q is the set of accept states (or final states)\n"
    },
    {
        "name": "Words Accepted by a DFA",
        "content": "\nDFA M = \u27e8Q, \u03a3, \u03b4, q0, F \u27e9 accepts the word w = a1 . . . an\nif there is a sequence of states q\u2032\nn \u2208 Q with\n0, . . . , q\u2032\n0 = q0,\n1 q\u2032\n2 \u03b4(q\u2032\n3 q\u2032\nn \u2208 F .\ni\u22121, ai ) = q\u2032\ni for all i \u2208 {1, . . . , n} and\n"
    },
    {
        "name": "Language Recognized by a DFA",
        "content": "\nLet M be a deterministic finite automaton.\nThe language recognized by M is defined as\nL(M) = {w \u2208 \u03a3\u2217 | w is accepted by M}.\n"
    },
    {
        "name": "Nondeterministic Finite Automata",
        "content": "\nA nondeterministic finite automaton (NFA) is a 5-tuple\nM = \u27e8Q, \u03a3, \u03b4, q0, F \u27e9 where\n\u25b6 Q is the finite set of states\n\u25b6 \u03a3 is the input alphabet\n\u25b6 \u03b4 : Q \u00d7 (\u03a3 \u222a {\u03b5}) \u2192 P(Q) is the transition function\n(mapping to the power set of Q)\n\u25b6 q0 \u2208 Q is the start state\n\u25b6 F \u2286 Q is the set of accept states\nDFAs are (essentially) a special case of NFAs.\n"
    },
    {
        "name": "\u03b5-closure",
        "content": "\nFor NFA M = \u27e8Q, \u03a3, \u03b4, q0, F \u27e9 and state q \u2208 Q, state p is in the\n\u03b5-closure E (q) of q iff there is a sequence of states q\u2032\n0, . . . , q\u2032\nn with\n1 q\u2032\n2 q\u2032\n3 q\u2032\n0 = q,\ni \u2208 \u03b4(q\u2032\nn = p.\ni\u22121, \u03b5) for all i \u2208 {1, . . . , n} and\nq \u2208 E (q) for every state q\n"
    },
    {
        "name": "Words Accepted by an NFA",
        "content": "\nNFA M = \u27e8Q, \u03a3, \u03b4, q0, F \u27e9 accepts the word w = a1 . . . an\nif there is a sequence of states q\u2032\nn \u2208 Q with\n0, . . . , q\u2032\n1 q\u2032\n2 q\u2032\n3 q\u2032\n0 \u2208 E (q0),\ni \u2208 (cid:83)\nn \u2208 F .\nq\u2208\u03b4(q\u2032\ni\u22121,ai ) E (q) for all i \u2208 {1, . . . , n} and\n"
    },
    {
        "name": "Language Recognized by an NFA",
        "content": "\nLet M be an NFA with input alphabet \u03a3.\nThe language recognized by M is defined as\nL(M) = {w \u2208 \u03a3\u2217 | w is accepted by M}.\n"
    },
    {
        "name": "Grammars",
        "content": "\nA grammar is a 4-tuple \u27e8V , \u03a3, R, S\u27e9 with:\n\u25b6 V finite set of variables (nonterminal symbols)\n\u25b6 \u03a3 finite alphabet of terminal symbols with V \u2229 \u03a3 = \u2205\n\u25b6 R \u2286 (V \u222a \u03a3)\u2217V (V \u222a \u03a3)\u2217 \u00d7 (V \u222a \u03a3)\u2217 finite set of rules\n\u25b6 S \u2208 V start variable\nA rule is sometimes also called a production or a production rule.\n"
    },
    {
        "name": "Derivations",
        "content": "\nLet \u27e8V , \u03a3, R, S\u27e9 be a grammar. A word v \u2208 (V \u222a \u03a3)\u2217 can be\nderived from word u \u2208 (V \u222a \u03a3)+ (written as u \u21d2 v ) if\n1 u = xyz, v = xy \u2032z with x, z \u2208 (V \u222a \u03a3)\u2217 and\n2\nthere is a rule y \u2192 y \u2032 \u2208 R.\nWe write: u \u21d2\u2217 v if v can be derived from u in finitely many steps\n(i. e., by using n derivations for n \u2208 N0).\n"
    },
    {
        "name": "Languages",
        "content": "\nThe language generated by a grammar G = \u27e8V , \u03a3, P, S\u27e9\nL(G ) = {w \u2208 \u03a3\u2217 | S \u21d2\u2217 w }\nis the set of all words from \u03a3\u2217 that can be derived from S\nwith finitely many rule applications.\n"
    },
    {
        "name": "Chomsky Hierarchy",
        "content": "\n\u25b6 Every grammar is of type 0 (all rules allowed).\n\u25b6 Grammar is of type 1 (context-sensitive)\nif all rules are of the form \u03b1B\u03b3 \u2192 \u03b1\u03b2\u03b3\nwith B \u2208 V and \u03b1, \u03b3 \u2208 (V \u222a \u03a3)\u2217 and \u03b2 \u2208 (V \u222a \u03a3)+\n\u25b6 Grammar is of type 2 (context-free)\nif all rules are of the form A \u2192 w ,\nwhere A \u2208 V and w \u2208 (V \u222a \u03a3)+.\n\u25b6 Grammar is of type 3 (regular)\nif all rules are of the form A \u2192 w ,\nwhere A \u2208 V and w \u2208 \u03a3 \u222a \u03a3V .\nspecial case: rule S \u2192 \u03b5 is always allowed if S is the start variable\nand never occurs on the right-hand side of any rule.\n"
    },
    {
        "name": "Type 0\u20133 Languages",
        "content": "\nA language L \u2286 \u03a3\u2217 is of type 0 (type 1, type 2, type 3)\nif there exists a type-0 (type-1, type-2, type-3) grammar G\nwith L(G ) = L.\n"
    },
    {
        "name": "Regular Grammars",
        "content": "\nA regular grammar is a 4-tuple \u27e8V , \u03a3, R, S\u27e9 with\n\u25b6 V finite set of variables (nonterminal symbols)\n\u25b6 \u03a3 finite alphabet of terminal symbols with V \u2229 \u03a3 = \u2205\n\u25b6 R \u2286 (V \u00d7 (\u03a3 \u222a \u03a3V )) \u222a {\u27e8S, \u03b5\u27e9} finite set of rules\n\u25b6 if S \u2192 \u03b5 \u2208 R, there is no X \u2208 V , y \u2208 \u03a3 with X \u2192 yS \u2208 R\n\u25b6 S \u2208 V start variable.\nRule X \u2192 \u03b5 is only allowed if X = S and\nS never occurs in the right-hand side of a rule.\n"
    },
    {
        "name": "Regular Language",
        "content": "\nA language L \u2286 \u03a3\u2217 is regular\nif there exists a regular grammar G with L(G ) = L.\n"
    },
    {
        "name": "Regular Grammars",
        "content": "\nA regular grammar is a 4-tuple \u27e8V , \u03a3, R, S\u27e9 with\n\u25b6 V finite set of variables (nonterminal symbols)\n\u25b6 \u03a3 finite alphabet of terminal symbols with V \u2229 \u03a3 = \u2205\n\u25b6 R \u2286 (V \u00d7 (\u03a3 \u222a \u03a3V )) \u222a {\u27e8S, \u03b5\u27e9} finite set of rules\n\u25b6 if S \u2192 \u03b5 \u2208 R, there is no X \u2208 V , y \u2208 \u03a3 with X \u2192 yS \u2208 R\n\u25b6 S \u2208 V start variable.\nRule X \u2192 \u03b5 is only allowed if X = S and\nS never occurs in the right-hand side of a rule.\nHow restrictive is this?\n"
    },
    {
        "name": "Closure",
        "content": "\nLet K be a class of languages.\nThen K is closed. . .\n\u25b6 . . . under union if L, L\u2032 \u2208 K implies L \u222a L\u2032 \u2208 K\n\u25b6 . . . under intersection if L, L\u2032 \u2208 K implies L \u2229 L\u2032 \u2208 K\n\u25b6 . . . under complement if L \u2208 K implies \u00afL \u2208 K\n\u25b6 . . . under concatenation if L, L\u2032 \u2208 K implies LL\u2032 \u2208 K\n\u25b6 . . . under star if L \u2208 K implies L\u2217 \u2208 K\n"
    },
    {
        "name": "Word Problem for Regular Languages",
        "content": "\nThe word problem P\u2208 for regular languages is:\nGiven:\nQuestion:\nregular grammar G with alphabet \u03a3\nand word w \u2208 \u03a3\u2217\nIs w \u2208 L(G )?\n"
    },
    {
        "name": "Emptiness Problem for Regular Languages",
        "content": "\nThe emptiness problem P\u2205 for regular languages is:\nGiven:\nQuestion:\nregular grammar G\nIs L(G ) = \u2205?\n"
    },
    {
        "name": "Finiteness Problem for Regular Languages",
        "content": "\nThe finiteness problem P\u221e for regular languages is:\nGiven:\nQuestion:\nregular grammar G\nIs |L(G )| < \u221e?\n"
    },
    {
        "name": "Intersection Problem for Regular Languages",
        "content": "\nThe intersection problem P\u2229 for regular languages is:\nregular grammars G and G \u2032\nIs L(G ) \u2229 L(G \u2032) = \u2205?\nGiven:\nQuestion:\n"
    },
    {
        "name": "Equivalence Problem for Regular Languages",
        "content": "\nThe equivalence problem P= for regular languages is:\nregular grammars G and G \u2032\nIs L(G ) = L(G \u2032)?\nGiven:\nQuestion:\n"
    },
    {
        "name": "Regular Expressions",
        "content": "\nRegular expressions over an alphabet \u03a3 are defined inductively:\n\u25b6 \u2205 is a regular expression\n\u25b6 \u03b5 is a regular expression\n\u25b6 If a \u2208 \u03a3, then a is a regular expression\nIf \u03b1 and \u03b2 are regular expressions, then so are:\n\u25b6 (\u03b1\u03b2) (concatenation)\n\u25b6 (\u03b1|\u03b2) (alternative)\n\u25b6 (\u03b1\u2217) (Kleene closure)\n"
    },
    {
        "name": "Language Described by a Regular Expression",
        "content": "\nThe language described by a regular expression \u03b3, written L(\u03b3),\nis inductively defined as follows:\n\u25b6 If \u03b3 = \u2205, then L(\u03b3) = \u2205.\n\u25b6 If \u03b3 = \u03b5, then L(\u03b3) = {\u03b5}.\n\u25b6 If \u03b3 = a with a \u2208 \u03a3, then L(\u03b3) = {a}.\n\u25b6 If \u03b3 = (\u03b1\u03b2), where \u03b1 and \u03b2 are regular expressions,\nthen L(\u03b3) = L(\u03b1)L(\u03b2).\n\u25b6 If \u03b3 = (\u03b1|\u03b2), where \u03b1 and \u03b2 are regular expressions,\nthen L(\u03b3) = L(\u03b1) \u222a L(\u03b2).\n\u25b6 If \u03b3 = (\u03b1\u2217) where \u03b1 is a regular expression,\nthen L(\u03b3) = L(\u03b1)\u2217.\n"
    },
    {
        "name": "Generalized Nondeterministic Finite Automata",
        "content": "\nA generalized nondeterministic finite automaton (GNFA) is a\n5-tuple M = \u27e8Q, \u03a3, \u03b4, qs , qa\u27e9 where\n\u25b6 Q is the finite set of states\n\u25b6 \u03a3 is the input alphabet\n\u25b6 \u03b4 : (Q \\ {qa}) \u00d7 (Q \\ {qs }) \u2192 R\u03a3 is the transition function\n(with R\u03a3 the set of all regular expressions over \u03a3)\n\u25b6 qs \u2208 Q is the start state\n\u25b6 qa \u2208 Q is the accept state\n"
    },
    {
        "name": "Words Accepted by a GNFA",
        "content": "\nGNFA M = \u27e8Q, \u03a3, \u03b4, qs , qa\u27e9 accepts the word w\nif w = w1 . . . wk , where each wi is in \u03a3\u2217\nand a sequence of states q0, q1, . . . , qk \u2208 Q exists with\n1 q0 = qs ,\n2\nfor each i, we have wi \u2208 L(Ri ), where Ri = \u03b4(qi\u22121, qi ), and\n3 qk = qa.\n"
    },
    {
        "name": "Context-free Grammar",
        "content": "\nA context-free grammar is a 4-tuple \u27e8V , \u03a3, P, S\u27e9 with\n1 V finite set of variables,\n2 \u03a3 finite alphabet of terminal symbols (with V \u2229 \u03a3 = \u2205),\n3 P \u2286 (V \u00d7 (V \u222a \u03a3)+) \u222a {\u27e8S, \u03b5\u27e9} finite set of rules,\n4\nIf S \u2192 \u03b5 \u2208 P, then all other rules in V \u00d7 ((V \\ {S}) \u222a \u03a3)+.\n5 S \u2208 V start variable.\nRule X \u2192 \u03b5 is only allowed if X = S\nand S never occurs on a right-hand side.\nWith regular grammars, this restriction could be lifted.\nHow about context-free grammars?\n"
    },
    {
        "name": "Context-free Grammar",
        "content": "\nA context-free grammar is a 4-tuple \u27e8V , \u03a3, P, S\u27e9 with\n1 V finite set of variables,\n2 \u03a3 finite alphabet of terminal symbols (with V \u2229 \u03a3 = \u2205),\n3 P \u2286 (V \u00d7 (V \u222a \u03a3)+) \u222a {\u27e8S, \u03b5\u27e9} finite set of rules,\n4\nIf S \u2192 \u03b5 \u2208 P, then all other rules in V \u00d7 ((V \\ {S}) \u222a \u03a3)+.\n5 S \u2208 V start variable.\nRule X \u2192 \u03b5 is only allowed if X = S\nand S never occurs on a right-hand side.\nWith regular grammars, this restriction could be lifted.\nHow about context-free grammars?\n"
    },
    {
        "name": "Context-free Grammar",
        "content": "\nA context-free grammar is a 4-tuple \u27e8V , \u03a3, P, S\u27e9 with\n1 V finite set of variables,\n2 \u03a3 finite alphabet of terminal symbols (with V \u2229 \u03a3 = \u2205),\n3 P \u2286 (V \u00d7 (V \u222a \u03a3)+) \u222a {\u27e8S, \u03b5\u27e9} finite set of rules,\n4\nIf S \u2192 \u03b5 \u2208 P, then all other rules in V \u00d7 ((V \\ {S}) \u222a \u03a3)+.\n5 S \u2208 V start variable.\nRule X \u2192 \u03b5 is only allowed if X = S\nand S never occurs on a right-hand side.\nWith regular grammars, this restriction could be lifted.\nHow about context-free grammars?\n"
    },
    {
        "name": "Chomsky Normal Form",
        "content": "\nA context-free grammar G is in Chomsky normal form\n(CNF) if all rules have one of the following three forms:\n\u25b6 A \u2192 BC with variables A, B, C , or\n\u25b6 A \u2192 a with variable A, terminal symbol a, or\n\u25b6 S \u2192 \u03b5 with start variable S.\nin short:\nrule set P \u2286 (V \u00d7 (V \u2032V \u2032 \u222a \u03a3)) \u222a {\u27e8S, \u03b5\u27e9} with V \u2032 = V \\ {S}\n"
    },
    {
        "name": "Push-down Automaton",
        "content": "\nA push-down automaton (PDA) is a 6-tuple\nM = \u27e8Q, \u03a3, \u0393, \u03b4, q0, F \u27e9 with\n\u25b6 Q finite set of states\n\u25b6 \u03a3 the input alphabet\n\u25b6 \u0393 the stack alphabet\n\u25b6 \u03b4 : Q \u00d7 (\u03a3 \u222a {\u03b5}) \u00d7 (\u0393 \u222a {\u03b5}) \u2192 P(Q \u00d7 (\u0393 \u222a {\u03b5})) the\ntransition function\n\u25b6 q0 \u2208 Q the start state\n\u25b6 F \u2286 Q is the set of accept states\n"
    },
    {
        "name": "",
        "content": "A PDA M = \u27e8Q, \u03a3, \u0393, \u03b4, q0, F \u27e9 accepts input w\nif it can be written as w = w1w2 . . . wm where each wi \u2208 \u03a3 \u222a {\u03b5}\nand sequences of states r0, r1, . . . , rm \u2208 Q and\nstrings s0, s1, . . . , sm \u2208 \u0393\u2217 exist\nthat satisfy the following three conditions:\n1\nr0 = q0 and s0 = \u03b5\n2 For i = 0, . . . , m \u2212 1, we have (ri+1, b) \u2208 \u03b4(ri , wi+1, a),\nwhere si = at and si+1 = bt for some a, b \u2208 \u0393 \u222a {\u03b5} and\nt \u2208 \u0393\u2217.\nrm \u2208 F\n3\nThe strings si represent the sequence of stack contents.\n"
    },
    {
        "name": "Language Recognized by an NFA",
        "content": "\nLet M be a PDA with input alphabet \u03a3.\nThe language recognized by M is defined as\nL(M) = {w \u2208 \u03a3\u2217 | w is accepted by M}.\n"
    },
    {
        "name": "Word Problem for Context-free Languages",
        "content": "\nThe word problem P\u2208 for context-free languages is:\nGiven:\nQuestion:\ncontext-free grammar G with alphabet \u03a3\nand word w \u2208 \u03a3\u2217\nIs w \u2208 L(G )?\n"
    },
    {
        "name": "Emptiness Problem for Context-free Languages",
        "content": "\nThe emptiness problem P\u2205 for context-free languages is:\nGiven:\nQuestion:\ncontext-free grammar G\nIs L(G ) = \u2205?\n"
    },
    {
        "name": "Finiteness Problem for Context-free Languages",
        "content": "\nThe finiteness problem P\u221e for context-free languages is:\nGiven:\nQuestion:\ncontext-free grammar G\nIs |L(G )| < \u221e?\n"
    },
    {
        "name": "Intersection Problem for Context-free Languages",
        "content": "\nThe intersection problem P\u2229 for context-free languages is:\ncontext-free grammars G and G \u2032\nIs L(G ) \u2229 L(G \u2032) = \u2205?\nGiven:\nQuestion:\n"
    },
    {
        "name": "Equivalence Problem for Context-free Languages",
        "content": "\nThe equivalence problem P= for context-free languages is:\ncontext-free grammars G and G \u2032\nIs L(G ) = L(G \u2032)?\nGiven:\nQuestion:\n"
    },
    {
        "name": "Deterministic Turing Machine",
        "content": "\nA (deterministic) Turing machine (DTM) is given by a 7-tuple\nM = \u27e8Q, \u03a3, \u0393, \u03b4, q0, qaccept, qreject\u27e9, where\nQ, \u03a3, \u0393 are all finite sets and\n\u25b6 Q is the set of states,\n\u25b6 \u03a3 is the input alphabet, not containing the blank symbol \u25a1,\n\u25b6 \u0393 is the tape alphabet, where \u25a1 \u2208 \u0393 and \u03a3 \u2286 \u0393,\n\u25b6 \u03b4 : (Q \\ {qaccept, qreject}) \u00d7 \u0393 \u2192 Q \u00d7 \u0393 \u00d7 {L, R} is the\ntransition function,\n\u25b6 q0 \u2208 Q is the start state,\n\u25b6 qaccept \u2208 Q is the accept state,\n\u25b6 qreject \u2208 Q is the reject state, where qaccept \u0338= qreject.\n"
    },
    {
        "name": "Configuration of a Turing Machine",
        "content": "\nA configuration of a Turing machine\nM = \u27e8Q, \u03a3, \u0393, \u03b4, q0, qaccept, qreject\u27e9\nis given by a triple c \u2208 \u0393\u2217 \u00d7 Q \u00d7 \u0393+.\nConfiguration \u27e8w1, q, w2\u27e9 intuitively means that\n\u25b6 the non-empty or already visited part of the tape\ncontains the word w1w2,\n\u25b6 the read-write head is on the first symbol of w2, and\n\u25b6 the TM is in state q.\n"
    },
    {
        "name": "Transition/Step of a Turing Machine",
        "content": "\nA DTM M = \u27e8Q, \u03a3, \u0393, \u03b4, q0, qaccept, qreject\u27e9 transitions\nfrom configuration c to configuration c \u2032 in one step (c \u22a2M c \u2032)\naccording to the following rules:\n\u25b6 \u27e8a1 . . . am, q, b1 . . . bn\u27e9 \u22a2M \u27e8a1 . . . amc, q\u2032, b2 . . . bn\u27e9\nif \u03b4(q, b1) = \u27e8q\u2032, c, R\u27e9, m \u2265 0, n \u2265 2\n\u25b6 \u27e8a1 . . . am, q, b1\u27e9 \u22a2M \u27e8a1 . . . amc, q\u2032, \u25a1\u27e9\nif \u03b4(q, b1) = \u27e8q\u2032, c, R\u27e9, m \u2265 0\n\u25b6 \u27e8a1 . . . am, q, b1 . . . bn\u27e9 \u22a2M \u27e8a1 . . . am\u22121, q\u2032, amcb2 . . . bn\u27e9\nif \u03b4(q, b1) = \u27e8q\u2032, c, L\u27e9, m \u2265 1, n \u2265 1\n\u25b6 \u27e8\u03b5, q, b1 . . . bn\u27e9 \u22a2M \u27e8\u03b5, q\u2032, cb2 . . . bn\u27e9\nif \u03b4(q, b1) = \u27e8q\u2032, c, L\u27e9, n \u2265 1\n"
    },
    {
        "name": "Words Accepted by a DTM",
        "content": "\nDTM M = \u27e8Q, \u03a3, \u0393, \u03b4, q0, qaccept, qreject\u27e9 accepts the word\nw = a1 . . . an if there is a sequence of configurations c0, . . . , ck with\n1 c0 is the start configuration of M on input w ,\n2 ci \u22a2M ci+1 for all i \u2208 {0, . . . , k \u2212 1}, and\n3 ck is an accepting configuration,\ni. e., a configuration with state qaccept.\n"
    },
    {
        "name": "Turing-recognizable Language",
        "content": "\nWe call a language Turing-recognizable if some deterministic\nTuring machine recognizes it.\n"
    },
    {
        "name": "Turing-decidable Language",
        "content": "\nWe call a language Turing-decidable (or decidable) if some\ndeterministic Turing machine decides it.\n"
    },
    {
        "name": "Deterministic Turing Machine",
        "content": "\nA (deterministic) Turing machine (DTM) is given by a 7-tuple\nM = \u27e8Q, \u03a3, \u0393, \u03b4, q0, qaccept, qreject\u27e9, where Q, \u03a3, \u0393 are finite and\n\u25b6 Q is the set of states,\n\u25b6 \u03a3 is the input alphabet, not containing the blank symbol \u25a1,\n\u25b6 \u0393 is the tape alphabet, where \u25a1 \u2208 \u0393 and \u03a3 \u2286 \u0393,\n\u25b6 \u03b4 : (Q \\ {qaccept, qreject}) \u00d7 \u0393 \u2192 Q \u00d7 \u0393 \u00d7 {L, R} is the\ntransition function,\n\u25b6 q0 \u2208 Q is the start state,\n\u25b6 qaccept \u2208 Q is the accept state,\n\u25b6 qreject \u2208 Q is the reject state, where qaccept \u0338= qreject.\nDeterministic TM with a single tape that is infinite at one side.\n"
    },
    {
        "name": "Context-sensitive Grammar",
        "content": "\nA context-sensitive grammar is a 4-tuple \u27e8V , \u03a3, R, S\u27e9 with\n\u25b6 V finite set of variables (nonterminal symbols)\n\u25b6 \u03a3 finite alphabet of terminal symbols with V \u2229 \u03a3 = \u2205\n\u25b6 R \u2286 (V \u222a \u03a3)\u2217V (V \u222a \u03a3)\u2217 \u00d7 (V \u222a \u03a3)\u2217 finite set of rules,\nwhere all rules are of the form \u03b1B\u03b3 \u2192 \u03b1\u03b2\u03b3\nwith B \u2208 V and \u03b1, \u03b3 \u2208 (V \u222a \u03a3)\u2217 and \u03b2 \u2208 (V \u222a \u03a3)+.\nException: S \u2192 \u03b5 is allowed if S never occurs on the\nright-hand side of a rule.\n\u25b6 S \u2208 V start variable.\n"
    },
    {
        "name": "Linear Bounded Automata",
        "content": "\nAn NTM M = \u27e8Q, \u03a3, \u0393, \u03b4, q0, qaccept, qreject\u27e9\nis called a linear bounded automaton (LBA)\nif for all q \u2208 Q \\ {qaccept, qreject} and all transition rules\n\u27e8q\u2032, c, y \u27e9 \u2208 \u03b4(q, \u25a1) we have c = \u25a1.\n"
    },
    {
        "name": "Turing Machine Encoded by a Word",
        "content": "\nFor all w \u2208 {0, 1}\u2217:\nMw =\nif w is the encoding of some DTM M \u2032\n(cid:40)\nM \u2032\n(cid:98)M otherwise\n"
    },
    {
        "name": "Turing-decidable Language",
        "content": "\nWe call a language Turing-decidable (or decidable) if some\ndeterministic Turing machine decides it.\n"
    },
    {
        "name": "Halting Problem",
        "content": "\nThe halting problem is the language\nH = {w #x \u2208 {0, 1, #}\u2217 | w , x \u2208 {0, 1}\u2217,\nMw started on x terminates}\n\u201cDoes the computation of the TM encoded by w halt on input x?\u201d\n\u201cDoes a given piece of code terminate on a given input?\u201d\n"
    },
    {
        "name": "Function Computed by a Turing Machine",
        "content": "\nA DTM M = \u27e8Q, \u03a3, \u0393, \u03b4, q0, qaccept, qreject\u27e9 computes the (partial)\nfunction f : \u03a3\u2217 \u2192p \u03a3\u2217 for which for all x, y \u2208 \u03a3\u2217:\nf (x) = y iff \u27e8\u03b5, q0, x\u27e9 \u22a2\u2217 \u27e8\u03b5, qaccept, y \u25a1 . . . \u25a1\u27e9.\n(special case: initial configuration \u27e8\u03b5, q0, \u25a1\u27e9 if x = \u03b5)\n\u25b6 What happens if the computation does not reach qaccept?\n\u25b6 What happens if symbols from \u0393 \\ \u03a3 (e. g., \u25a1) occur in y ?\n\u25b6 What happens if the read-write head is not at the first tape\ncell when accepting?\n\u25b6 Is f uniquely defined by this definition? Why?\n"
    },
    {
        "name": "Turing-Computable, f : \u03a3\u2217 \u2192p \u03a3\u2217",
        "content": "\nA (partial) function f : \u03a3\u2217 \u2192p \u03a3\u2217 is called Turing-computable\nif a DTM that computes f exists.\n"
    },
    {
        "name": "Encoded Function",
        "content": "\nLet f : Nk\nThe encoded function f code of f is the partial function\nf code : \u03a3\u2217 \u2192p \u03a3\u2217 with \u03a3 = {0, 1, #} and f code(w ) = w \u2032 iff\n0 \u2192p N0 be a (partial) function.\n\u25b6 there are n1, . . . , nk , n\u2032 \u2208 N0 such that\n\u25b6 f (n1, . . . , nk ) = n\u2032,\n\u25b6 w = bin(n1)# . . . #bin(nk ) and\n\u25b6 w \u2032 = bin(n\u2032).\nHere bin : N0 \u2192 {0, 1}\u2217 is the binary encoding\n(e. g., bin(5) = 101).\n"
    },
    {
        "name": "",
        "content": "A (partial) function f : Nk\nif a DTM that computes f code exists.\n0 \u2192p N0)\n0 \u2192p N0 is called Turing-computable\n"
    },
    {
        "name": "Reduction",
        "content": "\nLet A \u2286 \u03a3\u2217 and B \u2286 \u0393\u2217 be languages, and let f : \u03a3\u2217 \u2192 \u0393\u2217\nbe a total and computable function such that for all x \u2208 \u03a3\u2217:\nx \u2208 A if and only if\nf (x) \u2208 B.\nThen we say that A can be reduced to B (in symbols: A \u2264 B),\nand f is called a reduction from A to B.\n"
    },
    {
        "name": "Halting Problem",
        "content": "\nThe halting problem is the language\nH = {w #x \u2208 {0, 1, #}\u2217 | w , x \u2208 {0, 1}\u2217,\nMw started on x terminates}\n"
    },
    {
        "name": "Halting Problem on the Empty Tape",
        "content": "\nThe halting problem on the empty tape is the language\nH0 = {w \u2208 {0, 1}\u2217 | Mw started on \u03b5 terminates}.\nNote: H0 is Turing-recognizable. (Why?)\n"
    },
    {
        "name": "Post Correspondence Problem PCP",
        "content": "\nGiven: Finite sequence of pairs of words\n(t1, b1), (t2, b2), . . . , (tk , bk ), where ti , bi \u2208 \u03a3+\n(for an arbitrary alphabet \u03a3)\nQuestion:\nIs there a sequence\ni1, i2, . . . , in \u2208 {1, . . . , k}, n \u2265 1,\nwith ti1ti2 . . . tin = bi1bi2 . . . bin ?\nA solution of the correspondence problem is such a sequence\ni1, . . . , in, which we call a match.\n"
    },
    {
        "name": "Post Correspondence Problem PCP",
        "content": "\nThe Post Correspondence Problem PCP is the set\nPCP = {w | w encodes a sequence of pairs of words\n(t1, b1), (t2, b2), . . . , (tk , bk ), for which there is a\nsequence i1, i2, . . . , in \u2208 {1, . . . , k}\nsuch that ti1ti2 . . . tin = bi1bi2 . . . bin }.\n"
    },
    {
        "name": "Modified Post Correspondence Problem MPCP",
        "content": "\nGiven: Sequence of word pairs as for PCP\nQuestion:\nIs there a match i1, i2, . . . , in \u2208 {1, . . . , k}\nwith i1 = 1?\n"
    },
    {
        "name": "Arithmetic Formula",
        "content": "\nAn arithmetic formula is a closed predicate logic formula using\n\u25b6 constant symbols 0 and 1,\n\u25b6 function symbols + and \u00b7, and\n\u25b6 equality (=) as the only relation symbols.\nIt is called true if it is true under the usual interpretation\nof 0, 1, + and \u00b7 over N0.\nBeispiel: \u2200x\u2203y \u2200z(((x \u00b7 y ) = z) \u2227 ((1 + x) = (x \u00b7 y )))\n"
    },
    {
        "name": "Hamilton Cycle",
        "content": "\nLet G = \u27e8V , E \u27e9 be a (directed or undirected) graph.\nA Hamilton cycle of G is a sequence of vertices in V ,\n\u03c0 = \u27e8v0, . . . , vn\u27e9, with the following properties:\n\u25b6 \u03c0 is a path: there is an edge from vi to vi+1 for all 0 \u2264 i < n\n\u25b6 \u03c0 is a cycle: v0 = vn\n\u25b6 \u03c0 is simple: vi\n\u25b6 \u03c0 is Hamiltonian: all nodes of V are included in \u03c0\n\u0338= vj for all i \u0338= j with i, j < n\n"
    },
    {
        "name": "Runtime of a DTM",
        "content": "\nLet M be a DTM that halts on all inputs. The running time or\ntime complexity of M if the function f : N \u2192 N, where f (n) is the\nmaximum number of steps that M uses on any input of length n.\nWe say that\n\u25b6 M runs in time f and that\n\u25b6 M is an f time Turing machine.\n"
    },
    {
        "name": "Big-O",
        "content": "\nLet f and g be functions f , g : N \u2192 R+.\nWe say that f \u2208 O(g ) if positive integers c and n0 exist such that\nfor every integer n \u2265 n0\nf (n) \u2264 cg (n).\n"
    },
    {
        "name": "P",
        "content": "\nP is the class of languages that are decidable in polynomial time by\na deterministic single-tape Turing machine. In other words,\nP =\n(cid:91)\nk\nTIME(nk ).\n"
    },
    {
        "name": "Runtime of a NTM",
        "content": "\nLet M be a NTM that is a decider, i. e. all its computation\nbranches halt on all inputs.\nThe running time or time complexity of M if the function\nf : N \u2192 N, where f (n) is the maximum number of steps that M\nuses on any branch of its computation on any input of length n.\n"
    },
    {
        "name": "NP",
        "content": "\nNP is the class of languages that are decidable in polynomial time\nby a non-deterministic single-tape Turing machine. In other words,\nNP =\n(cid:91)\nk\nNTIME(nk ).\n"
    },
    {
        "name": "Polynomial Reduction",
        "content": "\nLet A \u2286 \u03a3\u2217 and B \u2286 \u0393\u2217 be decision problems.\nWe say that A can be polynomially reduced to B,\nwritten A \u2264p B, if there is a function f : \u03a3\u2217 \u2192 \u0393\u2217 such that:\n\u25b6 f can be computed in polynomial time by a DTM\n\u25b6 i. e., there is a polynomial p and a DTM M such that M\ncomputes f (w ) in at most p(|w |) steps given input w \u2208 \u03a3\u2217\n\u25b6 f reduces A to B\n\u25b6 i. e., for all w \u2208 \u03a3\u2217: w \u2208 A iff f (w ) \u2208 B\nf is called a polynomial reduction from A to B\n"
    },
    {
        "name": "Hamilton Cycle",
        "content": "\nA Hamilton cycle of G is a sequence of vertices in V ,\n\u03c0 = \u27e8v0, . . . , vn\u27e9, with the following properties:\n\u25b6 \u03c0 is a path: there is an edge from vi to vi+1 for all 0 \u2264 i < n\n\u25b6 \u03c0 is a cycle: v0 = vn\n\u25b6 \u03c0 is simple: vi\n\u25b6 \u03c0 is Hamiltonian: all nodes of V are included in \u03c0\n\u0338= vj for all i \u0338= j with i, j < n\n"
    },
    {
        "name": "TSP",
        "content": "\nTSP (traveling salesperson problem) is the following\ndecision problem:\n\u25b6 Given: finite set S \u0338= \u2205 of cities, symmetric cost function\ncost : S \u00d7 S \u2192 N0, cost bound K \u2208 N0\n\u25b6 Question: Is there a tour with total cost at most K , i. e.,\na permutation \u27e8s1, . . . , sn\u27e9 of the cities with\n(cid:80)n\u22121\ni=1 cost(si , si+1) + cost(sn, s1) \u2264 K ?\n"
    },
    {
        "name": "HamiltonianCompletion",
        "content": "\nHamiltonianCompletion is the following decision problem:\n\u25b6 Given: undirected graph G = \u27e8V , E \u27e9, number k \u2208 N0\n\u25b6 Question: Can G be extended with at most k edges such that\nthe resulting graph has a Hamilton cycle?\nShow that\nHamiltonCycle \u2264p HamiltonianCompletion.\n"
    },
    {
        "name": "NP-Hard, NP-Complete",
        "content": "\nLet B be a decision problem.\nB is called NP-hard if A \u2264p B for all problems A \u2208 NP.\nB is called NP-complete if B \u2208 NP and B is NP-hard.\n"
    },
    {
        "name": "Polynomial Reduction",
        "content": "\nLet A \u2286 \u03a3\u2217 and B \u2286 \u0393\u2217 be decision problems.\nWe say that A can be polynomially reduced to B,\nwritten A \u2264p B, if there is a function f : \u03a3\u2217 \u2192 \u0393\u2217 such that:\n\u25b6 f can be computed in polynomial time by a DTM\n\u25b6 f reduces A to B\n\u25b6 i. e., for all w \u2208 \u03a3\u2217: w \u2208 A iff f (w ) \u2208 B\nf is called a polynomial reduction from A to B\nTransitivity of \u2264p: If A \u2264p B and B \u2264p C , then A \u2264p C .\n"
    },
    {
        "name": "NP-Hard, NP-Complete",
        "content": "\nLet B be a decision problem.\nB is called NP-hard if A \u2264p B for all problems A \u2208 NP.\nB is called NP-complete if B \u2208 NP and B is NP-hard.\n"
    },
    {
        "name": "SAT",
        "content": "\nThe problem SAT (satisfiability) is defined as follows:\nGiven: a propositional logic formula \u03c6\nQuestion: Is \u03c6 satisfiable,\ni.e. is there a variable assignment I such that I |= \u03c6?\n"
    },
    {
        "name": "SAT",
        "content": "\nThe problem SAT (satisfiability) is defined as follows:\nGiven: a propositional logic formula \u03c6\nQuestion: Is \u03c6 satisfiable?\n"
    },
    {
        "name": "3SAT",
        "content": "\nThe problem 3SAT is defined as follows:\nGiven: a propositional logic formula \u03c6 in conjunctive normal form\nwith at most three literals per clause\nQuestion: Is \u03c6 satisfiable?\n"
    },
    {
        "name": "Clique",
        "content": "\nThe problem Clique is defined as follows:\nGiven: undirected graph G = \u27e8V , E \u27e9, number K \u2208 N0\nQuestion: Does G have a clique of size at least K ,\ni. e., a set of vertices C \u2286 V with |C | \u2265 K\nand {u, v } \u2208 E for all u, v \u2208 C with u \u0338= v ?\n"
    },
    {
        "name": "IndSet",
        "content": "\nThe problem IndSet is defined as follows:\nGiven: undirected graph G = \u27e8V , E \u27e9, number K \u2208 N0\nQuestion: Does G have an independent set of size at least K ,\ni. e., a set of vertices I \u2286 V with |I | \u2265 K\nand {u, v } /\u2208 E for all u, v \u2208 I with u \u0338= v ?\n"
    },
    {
        "name": "VertexCover",
        "content": "\nThe problem VertexCover is defined as follows:\nGiven: undirected graph G = \u27e8V , E \u27e9, number K \u2208 N0\nQuestion: Does G have a vertex cover of size at most K ,\ni. e., a set of vertices C \u2286 V with |C | \u2264 K and {u, v } \u2229 C \u0338= \u2205\nfor all {u, v } \u2208 E ?\n"
    },
    {
        "name": "Reminder: DirHamiltonCycle",
        "content": "\nThe problem DirHamiltonCycle is defined as follows:\nGiven: directed graph G = \u27e8V , E \u27e9\nQuestion: Does G contain a Hamilton cycle?\n"
    },
    {
        "name": "Reminder: HamiltonCycle",
        "content": "\nThe problem HamiltonCycle is defined as follows:\nGiven: undirected graph G = \u27e8V , E \u27e9\nQuestion: Does G contain a Hamilton cycle?\n"
    },
    {
        "name": "Reminder: TSP",
        "content": "\nTSP (traveling salesperson problem) is the following\ndecision problem:\n\u25b6 Given: finite set S \u0338= \u2205 of cities, symmetric cost function\ncost : S \u00d7 S \u2192 N0, cost bound K \u2208 N0\n\u25b6 Question: Is there a tour with total cost at most K , i. e.,\na permutation \u27e8s1, . . . , sn\u27e9 of the cities with\n(cid:80)n\u22121\ni=1 cost(si , si+1) + cost(sn, s1) \u2264 K ?\n"
    },
    {
        "name": "SubsetSum",
        "content": "\nThe problem SubsetSum is defined as follows:\nGiven: numbers a1, . . . , ak \u2208 N0 and b \u2208 N0\nQuestion: Is there a subset J \u2286 {1, . . . , k} with (cid:80)\ni\u2208J ai = b?\nWhich of the following instances have a subset with\nthe required sum?\n1 numbers: 1, 3, 3, 4, 5\nb = 11\n2 numbers: 1, 1001, 10, 1010, 100, 1100, 1000, 2000\nb = 4111\n"
    },
    {
        "name": "Partition",
        "content": "\nThe problem Partition is defined as follows:\nGiven: numbers a1, . . . , ak \u2208 N0\nQuestion: Is there a subset J \u2286 {1, . . . , k}\nwith (cid:80)\ni\u2208J ai = (cid:80)\ni\u2208{1,...,k}\\J ai ?\nIs there a partition of numbers 3, 6, 6, 10, 15?\n"
    },
    {
        "name": "BinPacking",
        "content": "\nThe problem BinPacking is defined as follows:\nGiven: bin size b \u2208 N0, number of bins k \u2208 N0,\nobjects a1, . . . , an \u2208 N0\nQuestion: Do the objects fit into the bins?\nFormally: is there a mapping f : {1, . . . , n} \u2192 {1, . . . , k}\nwith (cid:80)\ni\u2208{1,...,n} with f (i)=j ai \u2264 b for all 1 \u2264 j \u2264 k?\nCan you pack objects 1, 3, 3, 5, 8, 9 into 3 bins of size 10?\n"
    },
    {
        "name": "coNP",
        "content": "\ncoNP is the set of all languages L for which \u00afL \u2208 NP.\n"
    },
    {
        "name": "Hardness and Completeness",
        "content": "\nLet C be a complexity class.\nA problem Y is called C-hard if X \u2264p Y for all problems X \u2208 C.\nY is called C-complete if Y \u2208 C and Y is C-hard.\n"
    },
    {
        "name": "Time Complexity Classes TIME and NTIME",
        "content": "\nLet t : N \u2192 R+ be a function.\nThe time complexity class TIME(t(n)) is the collection of all\nlanguages that are decidable by an O(t) time Turing machine, and\nNTIME(t(n)) is the collection of all languages that are decidable\nby an O(t) time nondeterministic Turing machine.\n\u25b6 TIME(f ): all languages accepted by a DTM in time f .\n\u25b6 NTIME(f ): all languages accepted by a NTM in time f .\n\u25b6 P = (cid:83)\n\u25b6 NP = (cid:83)\nk\u2208N TIME(nk )\nk\u2208N NTIME(nk )\n"
    },
    {
        "name": "LOOP Program",
        "content": "\nLOOP programs are inductively defined as follows:\n\u25b6 xi := xj + c is a LOOP program\nfor every i, j, c \u2208 N0 (addition)\n\u25b6 xi := xj \u2212 c is a LOOP program\nfor every i, j, c \u2208 N0 (modified subtraction)\n\u25b6 If P1 and P2 are LOOP programs,\nthen so is P1;P2 (composition)\n\u25b6 If P is a LOOP program, then so is\nLOOP xi DO P END for every i \u2208 N0 (LOOP loop)\n"
    },
    {
        "name": "Semantics of LOOP Programs",
        "content": "\nA LOOP program computes a k-ary function\nf : Nk\n0 \u2192 N0. The computation of f (n1, . . . , nk ) works as follows:\nInitially, the variables x1, . . . , xk hold the values n1, . . . , nk .\nAll other variables hold the value 0.\n1\n2 During computation, the program modifies the variables\nas described on the following slides.\n3 The result of the computation (f (n1, . . . , nk )) is\nthe value of x0 after the execution of the program.\n"
    },
    {
        "name": "Semantics of LOOP Programs",
        "content": "\neffect of xi := xj + c:\n\u25b6 The variable xi is assigned the current value of xj plus c.\n\u25b6 All other variables retain their value.\n"
    },
    {
        "name": "Semantics of LOOP Programs",
        "content": "\neffect of xi := xj \u2212 c:\n\u25b6 The variable xi is assigned the current value of xj minus c\nif this value is non-negative.\n\u25b6 Otherwise xi is assigned the value 0.\n\u25b6 All other variables retain their value.\n"
    },
    {
        "name": "Semantics of LOOP Programs",
        "content": "\neffect of P1; P2:\n\u25b6 First, execute P1.\nThen, execute P2 (on the modified variable values).\n"
    },
    {
        "name": "Semantics of LOOP Programs",
        "content": "\neffect of LOOP xi DO P END:\n\u25b6 Let m be the value of variable xi at the start of execution.\n\u25b6 The program P is executed m times in sequence.\n"
    },
    {
        "name": "LOOP-Computable",
        "content": "\nA function f : Nk\nif a LOOP program that computes f exists.\n0 \u2192p N0 is called LOOP-computable\nNote: non-total functions are never LOOP-computable.\nNote: (Why not?)\n"
    },
    {
        "name": "WHILE Program",
        "content": "\nWHILE programs are inductively defined as follows:\n\u25b6 xi := xj + c is a WHILE program\nfor every i, j, c \u2208 N0 (addition)\n\u25b6 xi := xj \u2212 c is a WHILE program\nfor every i, j, c \u2208 N0 (modified subtraction)\n\u25b6 If P1 and P2 are WHILE programs,\nthen so is P1;P2 (composition)\n\u25b6 If P is a WHILE program, then so is\nWHILE xi\n\u0338= 0 DO P END for every i \u2208 N0 (WHILE loop)\n"
    },
    {
        "name": "Semantics of WHILE Programs",
        "content": "\nThe semantics of WHILE programs is defined\nexactly as for LOOP programs.\neffect of WHILE xi\n\u0338= 0 DO P END:\n\u25b6 If xi holds the value 0, program execution finishes.\n\u25b6 Otherwise execute P.\n\u25b6 Repeat these steps until execution finishes\n(potentially infinitely often).\n"
    },
    {
        "name": "WHILE-Computable",
        "content": "\nA function f : Nk\nif a WHILE program that computes f exists.\n0 \u2192p N0 is called WHILE-computable\n"
    },
    {
        "name": "Ackermann function",
        "content": "\nThe Ackermann function a : N2\n0 \u2192 N0 is defined as follows:\na(0, y ) = y + 1\na(x, 0) = a(x \u2212 1, 1)\nfor all y \u2265 0\nfor all x > 0\na(x, y ) = a(x \u2212 1, a(x, y \u2212 1))\nfor all x, y > 0\nNote: the recursion in the definition is bounded,\nNote: so this defines a total function.\n"
    },
    {
        "name": "GOTO Program",
        "content": "\nA GOTO program is given by a finite sequence\nL1 : A1, L2 : A2, . . . , Ln : An\nof labels and statements.\nStatements are of the following form:\n\u25b6 xi := xj + c for every i, j, c \u2208 N0 (addition)\n\u25b6 xi := xj \u2212 c for every i, j, c \u2208 N0 (modified subtraction)\n\u25b6 HALT (end of program)\n\u25b6 GOTO Lj for 1 \u2264 j \u2264 n (jump)\n\u25b6 IF xi = c THEN GOTO Lj for i, c \u2208 N0,\n1 \u2264 j \u2264 n (conditional jump)\n"
    },
    {
        "name": "Semantics of GOTO Programs",
        "content": "\n\u25b6 Input, output and variables work exactly\nas in LOOP and WHILE programs.\n\u25b6 Addition and modified subtraction work exactly\nas in LOOP and WHILE programs.\n\u25b6 Execution begins with the statement A1.\n\u25b6 After executing Ai , the statement Ai+1 is executed.\n(If i = n, execution finishes.)\n\u25b6 exceptions to the previous rule:\n\u25b6 HALT stops the execution of the program.\n\u25b6 After GOTO Lj execution continues with statement Aj .\n\u25b6 After IF xi = c THEN GOTO Lj execution continues\nwith Aj if variable xi currently holds the value c.\n"
    },
    {
        "name": "GOTO-Computable",
        "content": "\nA function f : Nk\nif a GOTO program that computes f exists.\n0 \u2192 N0 is called GOTO-computable\n"
    }
]